/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.blobtest.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wizardtest.blobtest.BlobData;


/**
 * ServiceImpl object for domain model class BlobData.
 *
 * @see BlobData
 */
@Service("BlobTest.BlobDataService")
@Validated
public class BlobDataServiceImpl implements BlobDataService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BlobDataServiceImpl.class);


    @Autowired
    @Qualifier("BlobTest.BlobDataDao")
    private WMGenericDao<BlobData, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<BlobData, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "BlobTestTransactionManager")
    @Override
    public BlobData create(BlobData blobData) {
        LOGGER.debug("Creating a new BlobData with information: {}", blobData);

        BlobData blobDataCreated = this.wmGenericDao.create(blobData);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(blobDataCreated);
    }

    @Transactional(readOnly = true, value = "BlobTestTransactionManager")
    @Override
    public BlobData getById(Integer blobdataId) {
        LOGGER.debug("Finding BlobData by id: {}", blobdataId);
        return this.wmGenericDao.findById(blobdataId);
    }

    @Transactional(readOnly = true, value = "BlobTestTransactionManager")
    @Override
    public BlobData findById(Integer blobdataId) {
        LOGGER.debug("Finding BlobData by id: {}", blobdataId);
        try {
            return this.wmGenericDao.findById(blobdataId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No BlobData found with id: {}", blobdataId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "BlobTestTransactionManager")
    @Override
    public List<BlobData> findByMultipleIds(List<Integer> blobdataIds, boolean orderedReturn) {
        LOGGER.debug("Finding BlobDatas by ids: {}", blobdataIds);

        return this.wmGenericDao.findByMultipleIds(blobdataIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "BlobTestTransactionManager")
    @Override
    public BlobData update(BlobData blobData) {
        LOGGER.debug("Updating BlobData with information: {}", blobData);

        this.wmGenericDao.update(blobData);
        this.wmGenericDao.refresh(blobData);

        return blobData;
    }

    @Transactional(value = "BlobTestTransactionManager")
    @Override
    public BlobData partialUpdate(Integer blobdataId, Map<String, Object>blobDataPatch) {
        LOGGER.debug("Partially Updating the BlobData with id: {}", blobdataId);

        BlobData blobData = getById(blobdataId);

        try {
            ObjectReader blobDataReader = this.objectMapper.reader().forType(BlobData.class).withValueToUpdate(blobData);
            blobData = blobDataReader.readValue(this.objectMapper.writeValueAsString(blobDataPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", blobDataPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        blobData = update(blobData);

        return blobData;
    }

    @Transactional(value = "BlobTestTransactionManager")
    @Override
    public BlobData delete(Integer blobdataId) {
        LOGGER.debug("Deleting BlobData with id: {}", blobdataId);
        BlobData deleted = this.wmGenericDao.findById(blobdataId);
        if (deleted == null) {
            LOGGER.debug("No BlobData found with id: {}", blobdataId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), BlobData.class.getSimpleName(), blobdataId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "BlobTestTransactionManager")
    @Override
    public void delete(BlobData blobData) {
        LOGGER.debug("Deleting BlobData with {}", blobData);
        this.wmGenericDao.delete(blobData);
    }

    @Transactional(readOnly = true, value = "BlobTestTransactionManager")
    @Override
    public Page<BlobData> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all BlobDatas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "BlobTestTransactionManager")
    @Override
    public Page<BlobData> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all BlobDatas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "BlobTestTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service BlobTest for table BlobData to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "BlobTestTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service BlobTest for table BlobData to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "BlobTestTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "BlobTestTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}