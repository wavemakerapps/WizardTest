/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.rndpp;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * NonEmp generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`NonEmp`")
public class NonEmp implements Serializable {

    private Integer nonEmpId;
    private String nonEmpName;
    private String organisation;
    private String nonempEmailId;
    private String location;
    private Integer requestId;
    private RequestMain requestMain;

    @Id
    @Column(name = "`NonEmpID`", nullable = false, scale = 0, precision = 10)
    public Integer getNonEmpId() {
        return this.nonEmpId;
    }

    public void setNonEmpId(Integer nonEmpId) {
        this.nonEmpId = nonEmpId;
    }

    @Column(name = "`NonEmpName`", nullable = true, length = 255)
    public String getNonEmpName() {
        return this.nonEmpName;
    }

    public void setNonEmpName(String nonEmpName) {
        this.nonEmpName = nonEmpName;
    }

    @Column(name = "`Organisation`", nullable = true, length = 255)
    public String getOrganisation() {
        return this.organisation;
    }

    public void setOrganisation(String organisation) {
        this.organisation = organisation;
    }

    @Column(name = "`NonempEmailID`", nullable = true, length = 255)
    public String getNonempEmailId() {
        return this.nonempEmailId;
    }

    public void setNonempEmailId(String nonempEmailId) {
        this.nonempEmailId = nonempEmailId;
    }

    @Column(name = "`Location`", nullable = true, length = 255)
    public String getLocation() {
        return this.location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    @Column(name = "`RequestID`", nullable = true, scale = 0, precision = 10)
    public Integer getRequestId() {
        return this.requestId;
    }

    public void setRequestId(Integer requestId) {
        this.requestId = requestId;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`NonEmpID`", referencedColumnName = "`RequestID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_NonEmp_TO_RequestMainUif5J`"))
    @Fetch(FetchMode.JOIN)
    public RequestMain getRequestMain() {
        return this.requestMain;
    }

    public void setRequestMain(RequestMain requestMain) {
        if(requestMain != null) {
            this.nonEmpId = requestMain.getRequestId();
        }

        this.requestMain = requestMain;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof NonEmp)) return false;
        final NonEmp nonEmp = (NonEmp) o;
        return Objects.equals(getNonEmpId(), nonEmp.getNonEmpId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getNonEmpId());
    }
}