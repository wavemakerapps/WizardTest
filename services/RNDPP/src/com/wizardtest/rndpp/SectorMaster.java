/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.rndpp;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * SectorMaster generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`SectorMaster`")
public class SectorMaster implements Serializable {

    private Integer sectorId;
    private String sectorName;
    private Integer segmentId;
    private SegmentMaster segmentMaster;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`SectorID`", nullable = false, scale = 0, precision = 10)
    public Integer getSectorId() {
        return this.sectorId;
    }

    public void setSectorId(Integer sectorId) {
        this.sectorId = sectorId;
    }

    @Column(name = "`SectorName`", nullable = true, length = 255)
    public String getSectorName() {
        return this.sectorName;
    }

    public void setSectorName(String sectorName) {
        this.sectorName = sectorName;
    }

    @Column(name = "`SegmentID`", nullable = true, scale = 0, precision = 10)
    public Integer getSegmentId() {
        return this.segmentId;
    }

    public void setSegmentId(Integer segmentId) {
        this.segmentId = segmentId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`SegmentID`", referencedColumnName = "`SegID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_SegmentMaster_TO_SectL2Qpg`"))
    @Fetch(FetchMode.JOIN)
    public SegmentMaster getSegmentMaster() {
        return this.segmentMaster;
    }

    public void setSegmentMaster(SegmentMaster segmentMaster) {
        if(segmentMaster != null) {
            this.segmentId = segmentMaster.getSegId();
        }

        this.segmentMaster = segmentMaster;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SectorMaster)) return false;
        final SectorMaster sectorMaster = (SectorMaster) o;
        return Objects.equals(getSectorId(), sectorMaster.getSectorId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getSectorId());
    }
}