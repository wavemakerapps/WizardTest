/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.rndpp;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * DisclosureDetails generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`DisclosureDetails`")
public class DisclosureDetails implements Serializable {

    private Integer discloId;
    private String disclosureType;
    private String desclosureDetails;
    private RequestMain requestMain;

    @Id
    @Column(name = "`DiscloID`", nullable = false, scale = 0, precision = 10)
    public Integer getDiscloId() {
        return this.discloId;
    }

    public void setDiscloId(Integer discloId) {
        this.discloId = discloId;
    }

    @Column(name = "`DisclosureType`", nullable = true, length = 255)
    public String getDisclosureType() {
        return this.disclosureType;
    }

    public void setDisclosureType(String disclosureType) {
        this.disclosureType = disclosureType;
    }

    @Column(name = "`DesclosureDetails`", nullable = true, length = 255)
    public String getDesclosureDetails() {
        return this.desclosureDetails;
    }

    public void setDesclosureDetails(String desclosureDetails) {
        this.desclosureDetails = desclosureDetails;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`DiscloID`", referencedColumnName = "`RequestID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_DisclosureDetails_TO_7aF8A`"))
    @Fetch(FetchMode.JOIN)
    public RequestMain getRequestMain() {
        return this.requestMain;
    }

    public void setRequestMain(RequestMain requestMain) {
        if(requestMain != null) {
            this.discloId = requestMain.getRequestId();
        }

        this.requestMain = requestMain;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof DisclosureDetails)) return false;
        final DisclosureDetails disclosureDetails = (DisclosureDetails) o;
        return Objects.equals(getDiscloId(), disclosureDetails.getDiscloId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getDiscloId());
    }
}