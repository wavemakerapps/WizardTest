/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.rndpp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wizardtest.rndpp.RequestMain;
import com.wizardtest.rndpp.SiteMaster;


/**
 * ServiceImpl object for domain model class SiteMaster.
 *
 * @see SiteMaster
 */
@Service("RNDPP.SiteMasterService")
@Validated
public class SiteMasterServiceImpl implements SiteMasterService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SiteMasterServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("RNDPP.RequestMainService")
    private RequestMainService requestMainService;

    @Autowired
    @Qualifier("RNDPP.SiteMasterDao")
    private WMGenericDao<SiteMaster, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<SiteMaster, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public SiteMaster create(SiteMaster siteMaster) {
        LOGGER.debug("Creating a new SiteMaster with information: {}", siteMaster);

        SiteMaster siteMasterCreated = this.wmGenericDao.create(siteMaster);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(siteMasterCreated);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public SiteMaster getById(Integer sitemasterId) {
        LOGGER.debug("Finding SiteMaster by id: {}", sitemasterId);
        return this.wmGenericDao.findById(sitemasterId);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public SiteMaster findById(Integer sitemasterId) {
        LOGGER.debug("Finding SiteMaster by id: {}", sitemasterId);
        try {
            return this.wmGenericDao.findById(sitemasterId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No SiteMaster found with id: {}", sitemasterId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public List<SiteMaster> findByMultipleIds(List<Integer> sitemasterIds, boolean orderedReturn) {
        LOGGER.debug("Finding SiteMasters by ids: {}", sitemasterIds);

        return this.wmGenericDao.findByMultipleIds(sitemasterIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "RNDPPTransactionManager")
    @Override
    public SiteMaster update(SiteMaster siteMaster) {
        LOGGER.debug("Updating SiteMaster with information: {}", siteMaster);

        this.wmGenericDao.update(siteMaster);
        this.wmGenericDao.refresh(siteMaster);

        return siteMaster;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public SiteMaster partialUpdate(Integer sitemasterId, Map<String, Object>siteMasterPatch) {
        LOGGER.debug("Partially Updating the SiteMaster with id: {}", sitemasterId);

        SiteMaster siteMaster = getById(sitemasterId);

        try {
            ObjectReader siteMasterReader = this.objectMapper.reader().forType(SiteMaster.class).withValueToUpdate(siteMaster);
            siteMaster = siteMasterReader.readValue(this.objectMapper.writeValueAsString(siteMasterPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", siteMasterPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        siteMaster = update(siteMaster);

        return siteMaster;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public SiteMaster delete(Integer sitemasterId) {
        LOGGER.debug("Deleting SiteMaster with id: {}", sitemasterId);
        SiteMaster deleted = this.wmGenericDao.findById(sitemasterId);
        if (deleted == null) {
            LOGGER.debug("No SiteMaster found with id: {}", sitemasterId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), SiteMaster.class.getSimpleName(), sitemasterId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public void delete(SiteMaster siteMaster) {
        LOGGER.debug("Deleting SiteMaster with {}", siteMaster);
        this.wmGenericDao.delete(siteMaster);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<SiteMaster> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SiteMasters");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<SiteMaster> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SiteMasters");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service RNDPP for table SiteMaster to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service RNDPP for table SiteMaster to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<RequestMain> findAssociatedRequestMains(Integer siteId, Pageable pageable) {
        LOGGER.debug("Fetching all associated requestMains");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("siteMaster.siteId = '" + siteId + "'");

        return requestMainService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service RequestMainService instance
     */
    protected void setRequestMainService(RequestMainService service) {
        this.requestMainService = service;
    }

}