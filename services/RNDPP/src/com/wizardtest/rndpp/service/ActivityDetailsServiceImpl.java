/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.rndpp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wizardtest.rndpp.ActivityDetails;


/**
 * ServiceImpl object for domain model class ActivityDetails.
 *
 * @see ActivityDetails
 */
@Service("RNDPP.ActivityDetailsService")
@Validated
public class ActivityDetailsServiceImpl implements ActivityDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ActivityDetailsServiceImpl.class);


    @Autowired
    @Qualifier("RNDPP.ActivityDetailsDao")
    private WMGenericDao<ActivityDetails, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<ActivityDetails, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public ActivityDetails create(ActivityDetails activityDetailsInstance) {
        LOGGER.debug("Creating a new ActivityDetails with information: {}", activityDetailsInstance);

        ActivityDetails activityDetailsInstanceCreated = this.wmGenericDao.create(activityDetailsInstance);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(activityDetailsInstanceCreated);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public ActivityDetails getById(Integer activitydetailsId) {
        LOGGER.debug("Finding ActivityDetails by id: {}", activitydetailsId);
        return this.wmGenericDao.findById(activitydetailsId);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public ActivityDetails findById(Integer activitydetailsId) {
        LOGGER.debug("Finding ActivityDetails by id: {}", activitydetailsId);
        try {
            return this.wmGenericDao.findById(activitydetailsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ActivityDetails found with id: {}", activitydetailsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public List<ActivityDetails> findByMultipleIds(List<Integer> activitydetailsIds, boolean orderedReturn) {
        LOGGER.debug("Finding ActivityDetails by ids: {}", activitydetailsIds);

        return this.wmGenericDao.findByMultipleIds(activitydetailsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "RNDPPTransactionManager")
    @Override
    public ActivityDetails update(ActivityDetails activityDetailsInstance) {
        LOGGER.debug("Updating ActivityDetails with information: {}", activityDetailsInstance);

        this.wmGenericDao.update(activityDetailsInstance);
        this.wmGenericDao.refresh(activityDetailsInstance);

        return activityDetailsInstance;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public ActivityDetails partialUpdate(Integer activitydetailsId, Map<String, Object>activityDetailsInstancePatch) {
        LOGGER.debug("Partially Updating the ActivityDetails with id: {}", activitydetailsId);

        ActivityDetails activityDetailsInstance = getById(activitydetailsId);

        try {
            ObjectReader activityDetailsInstanceReader = this.objectMapper.reader().forType(ActivityDetails.class).withValueToUpdate(activityDetailsInstance);
            activityDetailsInstance = activityDetailsInstanceReader.readValue(this.objectMapper.writeValueAsString(activityDetailsInstancePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", activityDetailsInstancePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        activityDetailsInstance = update(activityDetailsInstance);

        return activityDetailsInstance;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public ActivityDetails delete(Integer activitydetailsId) {
        LOGGER.debug("Deleting ActivityDetails with id: {}", activitydetailsId);
        ActivityDetails deleted = this.wmGenericDao.findById(activitydetailsId);
        if (deleted == null) {
            LOGGER.debug("No ActivityDetails found with id: {}", activitydetailsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), ActivityDetails.class.getSimpleName(), activitydetailsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public void delete(ActivityDetails activityDetailsInstance) {
        LOGGER.debug("Deleting ActivityDetails with {}", activityDetailsInstance);
        this.wmGenericDao.delete(activityDetailsInstance);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<ActivityDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ActivityDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<ActivityDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ActivityDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service RNDPP for table ActivityDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service RNDPP for table ActivityDetails to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}