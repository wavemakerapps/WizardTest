/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.rndpp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wizardtest.rndpp.DisclosureDetails;


/**
 * ServiceImpl object for domain model class DisclosureDetails.
 *
 * @see DisclosureDetails
 */
@Service("RNDPP.DisclosureDetailsService")
@Validated
public class DisclosureDetailsServiceImpl implements DisclosureDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DisclosureDetailsServiceImpl.class);


    @Autowired
    @Qualifier("RNDPP.DisclosureDetailsDao")
    private WMGenericDao<DisclosureDetails, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<DisclosureDetails, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public DisclosureDetails create(DisclosureDetails disclosureDetails) {
        LOGGER.debug("Creating a new DisclosureDetails with information: {}", disclosureDetails);

        DisclosureDetails disclosureDetailsCreated = this.wmGenericDao.create(disclosureDetails);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(disclosureDetailsCreated);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public DisclosureDetails getById(Integer disclosuredetailsId) {
        LOGGER.debug("Finding DisclosureDetails by id: {}", disclosuredetailsId);
        return this.wmGenericDao.findById(disclosuredetailsId);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public DisclosureDetails findById(Integer disclosuredetailsId) {
        LOGGER.debug("Finding DisclosureDetails by id: {}", disclosuredetailsId);
        try {
            return this.wmGenericDao.findById(disclosuredetailsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No DisclosureDetails found with id: {}", disclosuredetailsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public List<DisclosureDetails> findByMultipleIds(List<Integer> disclosuredetailsIds, boolean orderedReturn) {
        LOGGER.debug("Finding DisclosureDetails by ids: {}", disclosuredetailsIds);

        return this.wmGenericDao.findByMultipleIds(disclosuredetailsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "RNDPPTransactionManager")
    @Override
    public DisclosureDetails update(DisclosureDetails disclosureDetails) {
        LOGGER.debug("Updating DisclosureDetails with information: {}", disclosureDetails);

        this.wmGenericDao.update(disclosureDetails);
        this.wmGenericDao.refresh(disclosureDetails);

        return disclosureDetails;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public DisclosureDetails partialUpdate(Integer disclosuredetailsId, Map<String, Object>disclosureDetailsPatch) {
        LOGGER.debug("Partially Updating the DisclosureDetails with id: {}", disclosuredetailsId);

        DisclosureDetails disclosureDetails = getById(disclosuredetailsId);

        try {
            ObjectReader disclosureDetailsReader = this.objectMapper.reader().forType(DisclosureDetails.class).withValueToUpdate(disclosureDetails);
            disclosureDetails = disclosureDetailsReader.readValue(this.objectMapper.writeValueAsString(disclosureDetailsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", disclosureDetailsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        disclosureDetails = update(disclosureDetails);

        return disclosureDetails;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public DisclosureDetails delete(Integer disclosuredetailsId) {
        LOGGER.debug("Deleting DisclosureDetails with id: {}", disclosuredetailsId);
        DisclosureDetails deleted = this.wmGenericDao.findById(disclosuredetailsId);
        if (deleted == null) {
            LOGGER.debug("No DisclosureDetails found with id: {}", disclosuredetailsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), DisclosureDetails.class.getSimpleName(), disclosuredetailsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public void delete(DisclosureDetails disclosureDetails) {
        LOGGER.debug("Deleting DisclosureDetails with {}", disclosureDetails);
        this.wmGenericDao.delete(disclosureDetails);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<DisclosureDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all DisclosureDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<DisclosureDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all DisclosureDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service RNDPP for table DisclosureDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service RNDPP for table DisclosureDetails to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}