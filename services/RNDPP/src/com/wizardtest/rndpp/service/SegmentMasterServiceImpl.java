/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.rndpp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wizardtest.rndpp.GroupMaster;
import com.wizardtest.rndpp.RequestMain;
import com.wizardtest.rndpp.SectorMaster;
import com.wizardtest.rndpp.SegmentMaster;


/**
 * ServiceImpl object for domain model class SegmentMaster.
 *
 * @see SegmentMaster
 */
@Service("RNDPP.SegmentMasterService")
@Validated
public class SegmentMasterServiceImpl implements SegmentMasterService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SegmentMasterServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("RNDPP.SectorMasterService")
    private SectorMasterService sectorMasterService;

    @Lazy
    @Autowired
    @Qualifier("RNDPP.GroupMasterService")
    private GroupMasterService groupMasterService;

    @Lazy
    @Autowired
    @Qualifier("RNDPP.RequestMainService")
    private RequestMainService requestMainService;

    @Autowired
    @Qualifier("RNDPP.SegmentMasterDao")
    private WMGenericDao<SegmentMaster, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<SegmentMaster, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public SegmentMaster create(SegmentMaster segmentMaster) {
        LOGGER.debug("Creating a new SegmentMaster with information: {}", segmentMaster);

        SegmentMaster segmentMasterCreated = this.wmGenericDao.create(segmentMaster);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(segmentMasterCreated);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public SegmentMaster getById(Integer segmentmasterId) {
        LOGGER.debug("Finding SegmentMaster by id: {}", segmentmasterId);
        return this.wmGenericDao.findById(segmentmasterId);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public SegmentMaster findById(Integer segmentmasterId) {
        LOGGER.debug("Finding SegmentMaster by id: {}", segmentmasterId);
        try {
            return this.wmGenericDao.findById(segmentmasterId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No SegmentMaster found with id: {}", segmentmasterId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public List<SegmentMaster> findByMultipleIds(List<Integer> segmentmasterIds, boolean orderedReturn) {
        LOGGER.debug("Finding SegmentMasters by ids: {}", segmentmasterIds);

        return this.wmGenericDao.findByMultipleIds(segmentmasterIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "RNDPPTransactionManager")
    @Override
    public SegmentMaster update(SegmentMaster segmentMaster) {
        LOGGER.debug("Updating SegmentMaster with information: {}", segmentMaster);

        this.wmGenericDao.update(segmentMaster);
        this.wmGenericDao.refresh(segmentMaster);

        return segmentMaster;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public SegmentMaster partialUpdate(Integer segmentmasterId, Map<String, Object>segmentMasterPatch) {
        LOGGER.debug("Partially Updating the SegmentMaster with id: {}", segmentmasterId);

        SegmentMaster segmentMaster = getById(segmentmasterId);

        try {
            ObjectReader segmentMasterReader = this.objectMapper.reader().forType(SegmentMaster.class).withValueToUpdate(segmentMaster);
            segmentMaster = segmentMasterReader.readValue(this.objectMapper.writeValueAsString(segmentMasterPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", segmentMasterPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        segmentMaster = update(segmentMaster);

        return segmentMaster;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public SegmentMaster delete(Integer segmentmasterId) {
        LOGGER.debug("Deleting SegmentMaster with id: {}", segmentmasterId);
        SegmentMaster deleted = this.wmGenericDao.findById(segmentmasterId);
        if (deleted == null) {
            LOGGER.debug("No SegmentMaster found with id: {}", segmentmasterId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), SegmentMaster.class.getSimpleName(), segmentmasterId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public void delete(SegmentMaster segmentMaster) {
        LOGGER.debug("Deleting SegmentMaster with {}", segmentMaster);
        this.wmGenericDao.delete(segmentMaster);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<SegmentMaster> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SegmentMasters");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<SegmentMaster> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SegmentMasters");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service RNDPP for table SegmentMaster to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service RNDPP for table SegmentMaster to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<GroupMaster> findAssociatedGroupMasters(Integer segId, Pageable pageable) {
        LOGGER.debug("Fetching all associated groupMasters");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("segmentMaster.segId = '" + segId + "'");

        return groupMasterService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<RequestMain> findAssociatedRequestMains(Integer segId, Pageable pageable) {
        LOGGER.debug("Fetching all associated requestMains");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("segmentMaster.segId = '" + segId + "'");

        return requestMainService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<SectorMaster> findAssociatedSectorMasters(Integer segId, Pageable pageable) {
        LOGGER.debug("Fetching all associated sectorMasters");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("segmentMaster.segId = '" + segId + "'");

        return sectorMasterService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service SectorMasterService instance
     */
    protected void setSectorMasterService(SectorMasterService service) {
        this.sectorMasterService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service GroupMasterService instance
     */
    protected void setGroupMasterService(GroupMasterService service) {
        this.groupMasterService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service RequestMainService instance
     */
    protected void setRequestMainService(RequestMainService service) {
        this.requestMainService = service;
    }

}