/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.rndpp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wizardtest.rndpp.ContentDetails;

/**
 * Service object for domain model class {@link ContentDetails}.
 */
public interface ContentDetailsService {

    /**
     * Creates a new ContentDetails. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ContentDetails if any.
     *
     * @param contentDetails Details of the ContentDetails to be created; value cannot be null.
     * @return The newly created ContentDetails.
     */
    ContentDetails create(@Valid ContentDetails contentDetails);


	/**
     * Returns ContentDetails by given id if exists.
     *
     * @param contentdetailsId The id of the ContentDetails to get; value cannot be null.
     * @return ContentDetails associated with the given contentdetailsId.
	 * @throws EntityNotFoundException If no ContentDetails is found.
     */
    ContentDetails getById(Integer contentdetailsId);

    /**
     * Find and return the ContentDetails by given id if exists, returns null otherwise.
     *
     * @param contentdetailsId The id of the ContentDetails to get; value cannot be null.
     * @return ContentDetails associated with the given contentdetailsId.
     */
    ContentDetails findById(Integer contentdetailsId);

	/**
     * Find and return the list of ContentDetails by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param contentdetailsIds The id's of the ContentDetails to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return ContentDetails associated with the given contentdetailsIds.
     */
    List<ContentDetails> findByMultipleIds(List<Integer> contentdetailsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing ContentDetails. It replaces all fields of the existing ContentDetails with the given contentDetails.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ContentDetails if any.
     *
     * @param contentDetails The details of the ContentDetails to be updated; value cannot be null.
     * @return The updated ContentDetails.
     * @throws EntityNotFoundException if no ContentDetails is found with given input.
     */
    ContentDetails update(@Valid ContentDetails contentDetails);


    /**
     * Partially updates the details of an existing ContentDetails. It updates only the
     * fields of the existing ContentDetails which are passed in the contentDetailsPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ContentDetails if any.
     *
     * @param contentdetailsId The id of the ContentDetails to be deleted; value cannot be null.
     * @param contentDetailsPatch The partial data of ContentDetails which is supposed to be updated; value cannot be null.
     * @return The updated ContentDetails.
     * @throws EntityNotFoundException if no ContentDetails is found with given input.
     */
    ContentDetails partialUpdate(Integer contentdetailsId, Map<String, Object> contentDetailsPatch);

    /**
     * Deletes an existing ContentDetails with the given id.
     *
     * @param contentdetailsId The id of the ContentDetails to be deleted; value cannot be null.
     * @return The deleted ContentDetails.
     * @throws EntityNotFoundException if no ContentDetails found with the given id.
     */
    ContentDetails delete(Integer contentdetailsId);

    /**
     * Deletes an existing ContentDetails with the given object.
     *
     * @param contentDetails The instance of the ContentDetails to be deleted; value cannot be null.
     */
    void delete(ContentDetails contentDetails);

    /**
     * Find all ContentDetails matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ContentDetails.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<ContentDetails> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all ContentDetails matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ContentDetails.
     *
     * @see Pageable
     * @see Page
     */
    Page<ContentDetails> findAll(String query, Pageable pageable);

    /**
     * Exports all ContentDetails matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all ContentDetails matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the ContentDetails in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the ContentDetails.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}