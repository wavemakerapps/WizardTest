/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.rndpp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wizardtest.rndpp.NonEmp;


/**
 * ServiceImpl object for domain model class NonEmp.
 *
 * @see NonEmp
 */
@Service("RNDPP.NonEmpService")
@Validated
public class NonEmpServiceImpl implements NonEmpService {

    private static final Logger LOGGER = LoggerFactory.getLogger(NonEmpServiceImpl.class);


    @Autowired
    @Qualifier("RNDPP.NonEmpDao")
    private WMGenericDao<NonEmp, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<NonEmp, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public NonEmp create(NonEmp nonEmp) {
        LOGGER.debug("Creating a new NonEmp with information: {}", nonEmp);

        NonEmp nonEmpCreated = this.wmGenericDao.create(nonEmp);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(nonEmpCreated);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public NonEmp getById(Integer nonempId) {
        LOGGER.debug("Finding NonEmp by id: {}", nonempId);
        return this.wmGenericDao.findById(nonempId);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public NonEmp findById(Integer nonempId) {
        LOGGER.debug("Finding NonEmp by id: {}", nonempId);
        try {
            return this.wmGenericDao.findById(nonempId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No NonEmp found with id: {}", nonempId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public List<NonEmp> findByMultipleIds(List<Integer> nonempIds, boolean orderedReturn) {
        LOGGER.debug("Finding NonEmps by ids: {}", nonempIds);

        return this.wmGenericDao.findByMultipleIds(nonempIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "RNDPPTransactionManager")
    @Override
    public NonEmp update(NonEmp nonEmp) {
        LOGGER.debug("Updating NonEmp with information: {}", nonEmp);

        this.wmGenericDao.update(nonEmp);
        this.wmGenericDao.refresh(nonEmp);

        return nonEmp;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public NonEmp partialUpdate(Integer nonempId, Map<String, Object>nonEmpPatch) {
        LOGGER.debug("Partially Updating the NonEmp with id: {}", nonempId);

        NonEmp nonEmp = getById(nonempId);

        try {
            ObjectReader nonEmpReader = this.objectMapper.reader().forType(NonEmp.class).withValueToUpdate(nonEmp);
            nonEmp = nonEmpReader.readValue(this.objectMapper.writeValueAsString(nonEmpPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", nonEmpPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        nonEmp = update(nonEmp);

        return nonEmp;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public NonEmp delete(Integer nonempId) {
        LOGGER.debug("Deleting NonEmp with id: {}", nonempId);
        NonEmp deleted = this.wmGenericDao.findById(nonempId);
        if (deleted == null) {
            LOGGER.debug("No NonEmp found with id: {}", nonempId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), NonEmp.class.getSimpleName(), nonempId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public void delete(NonEmp nonEmp) {
        LOGGER.debug("Deleting NonEmp with {}", nonEmp);
        this.wmGenericDao.delete(nonEmp);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<NonEmp> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all NonEmps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<NonEmp> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all NonEmps");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service RNDPP for table NonEmp to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service RNDPP for table NonEmp to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}