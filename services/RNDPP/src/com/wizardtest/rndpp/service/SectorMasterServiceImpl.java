/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.rndpp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wizardtest.rndpp.GroupMaster;
import com.wizardtest.rndpp.RequestMain;
import com.wizardtest.rndpp.SectorMaster;


/**
 * ServiceImpl object for domain model class SectorMaster.
 *
 * @see SectorMaster
 */
@Service("RNDPP.SectorMasterService")
@Validated
public class SectorMasterServiceImpl implements SectorMasterService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SectorMasterServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("RNDPP.GroupMasterService")
    private GroupMasterService groupMasterService;

    @Lazy
    @Autowired
    @Qualifier("RNDPP.RequestMainService")
    private RequestMainService requestMainService;

    @Autowired
    @Qualifier("RNDPP.SectorMasterDao")
    private WMGenericDao<SectorMaster, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<SectorMaster, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public SectorMaster create(SectorMaster sectorMaster) {
        LOGGER.debug("Creating a new SectorMaster with information: {}", sectorMaster);

        SectorMaster sectorMasterCreated = this.wmGenericDao.create(sectorMaster);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(sectorMasterCreated);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public SectorMaster getById(Integer sectormasterId) {
        LOGGER.debug("Finding SectorMaster by id: {}", sectormasterId);
        return this.wmGenericDao.findById(sectormasterId);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public SectorMaster findById(Integer sectormasterId) {
        LOGGER.debug("Finding SectorMaster by id: {}", sectormasterId);
        try {
            return this.wmGenericDao.findById(sectormasterId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No SectorMaster found with id: {}", sectormasterId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public List<SectorMaster> findByMultipleIds(List<Integer> sectormasterIds, boolean orderedReturn) {
        LOGGER.debug("Finding SectorMasters by ids: {}", sectormasterIds);

        return this.wmGenericDao.findByMultipleIds(sectormasterIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "RNDPPTransactionManager")
    @Override
    public SectorMaster update(SectorMaster sectorMaster) {
        LOGGER.debug("Updating SectorMaster with information: {}", sectorMaster);

        this.wmGenericDao.update(sectorMaster);
        this.wmGenericDao.refresh(sectorMaster);

        return sectorMaster;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public SectorMaster partialUpdate(Integer sectormasterId, Map<String, Object>sectorMasterPatch) {
        LOGGER.debug("Partially Updating the SectorMaster with id: {}", sectormasterId);

        SectorMaster sectorMaster = getById(sectormasterId);

        try {
            ObjectReader sectorMasterReader = this.objectMapper.reader().forType(SectorMaster.class).withValueToUpdate(sectorMaster);
            sectorMaster = sectorMasterReader.readValue(this.objectMapper.writeValueAsString(sectorMasterPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", sectorMasterPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        sectorMaster = update(sectorMaster);

        return sectorMaster;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public SectorMaster delete(Integer sectormasterId) {
        LOGGER.debug("Deleting SectorMaster with id: {}", sectormasterId);
        SectorMaster deleted = this.wmGenericDao.findById(sectormasterId);
        if (deleted == null) {
            LOGGER.debug("No SectorMaster found with id: {}", sectormasterId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), SectorMaster.class.getSimpleName(), sectormasterId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public void delete(SectorMaster sectorMaster) {
        LOGGER.debug("Deleting SectorMaster with {}", sectorMaster);
        this.wmGenericDao.delete(sectorMaster);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<SectorMaster> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SectorMasters");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<SectorMaster> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SectorMasters");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service RNDPP for table SectorMaster to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service RNDPP for table SectorMaster to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<RequestMain> findAssociatedRequestMains(Integer sectorId, Pageable pageable) {
        LOGGER.debug("Fetching all associated requestMains");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("sectorMaster.sectorId = '" + sectorId + "'");

        return requestMainService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<GroupMaster> findAssociatedGroupMasters(Integer sectorId, Pageable pageable) {
        LOGGER.debug("Fetching all associated groupMasters");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("sectorMaster.sectorId = '" + sectorId + "'");

        return groupMasterService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service GroupMasterService instance
     */
    protected void setGroupMasterService(GroupMasterService service) {
        this.groupMasterService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service RequestMainService instance
     */
    protected void setRequestMainService(RequestMainService service) {
        this.requestMainService = service;
    }

}