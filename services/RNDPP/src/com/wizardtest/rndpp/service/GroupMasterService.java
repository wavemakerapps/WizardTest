/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.rndpp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wizardtest.rndpp.GroupMaster;
import com.wizardtest.rndpp.RequestMain;

/**
 * Service object for domain model class {@link GroupMaster}.
 */
public interface GroupMasterService {

    /**
     * Creates a new GroupMaster. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on GroupMaster if any.
     *
     * @param groupMaster Details of the GroupMaster to be created; value cannot be null.
     * @return The newly created GroupMaster.
     */
    GroupMaster create(@Valid GroupMaster groupMaster);


	/**
     * Returns GroupMaster by given id if exists.
     *
     * @param groupmasterId The id of the GroupMaster to get; value cannot be null.
     * @return GroupMaster associated with the given groupmasterId.
	 * @throws EntityNotFoundException If no GroupMaster is found.
     */
    GroupMaster getById(Integer groupmasterId);

    /**
     * Find and return the GroupMaster by given id if exists, returns null otherwise.
     *
     * @param groupmasterId The id of the GroupMaster to get; value cannot be null.
     * @return GroupMaster associated with the given groupmasterId.
     */
    GroupMaster findById(Integer groupmasterId);

	/**
     * Find and return the list of GroupMasters by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param groupmasterIds The id's of the GroupMaster to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return GroupMasters associated with the given groupmasterIds.
     */
    List<GroupMaster> findByMultipleIds(List<Integer> groupmasterIds, boolean orderedReturn);


    /**
     * Updates the details of an existing GroupMaster. It replaces all fields of the existing GroupMaster with the given groupMaster.
     *
     * This method overrides the input field values using Server side or database managed properties defined on GroupMaster if any.
     *
     * @param groupMaster The details of the GroupMaster to be updated; value cannot be null.
     * @return The updated GroupMaster.
     * @throws EntityNotFoundException if no GroupMaster is found with given input.
     */
    GroupMaster update(@Valid GroupMaster groupMaster);


    /**
     * Partially updates the details of an existing GroupMaster. It updates only the
     * fields of the existing GroupMaster which are passed in the groupMasterPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on GroupMaster if any.
     *
     * @param groupmasterId The id of the GroupMaster to be deleted; value cannot be null.
     * @param groupMasterPatch The partial data of GroupMaster which is supposed to be updated; value cannot be null.
     * @return The updated GroupMaster.
     * @throws EntityNotFoundException if no GroupMaster is found with given input.
     */
    GroupMaster partialUpdate(Integer groupmasterId, Map<String, Object> groupMasterPatch);

    /**
     * Deletes an existing GroupMaster with the given id.
     *
     * @param groupmasterId The id of the GroupMaster to be deleted; value cannot be null.
     * @return The deleted GroupMaster.
     * @throws EntityNotFoundException if no GroupMaster found with the given id.
     */
    GroupMaster delete(Integer groupmasterId);

    /**
     * Deletes an existing GroupMaster with the given object.
     *
     * @param groupMaster The instance of the GroupMaster to be deleted; value cannot be null.
     */
    void delete(GroupMaster groupMaster);

    /**
     * Find all GroupMasters matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching GroupMasters.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<GroupMaster> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all GroupMasters matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching GroupMasters.
     *
     * @see Pageable
     * @see Page
     */
    Page<GroupMaster> findAll(String query, Pageable pageable);

    /**
     * Exports all GroupMasters matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all GroupMasters matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the GroupMasters in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the GroupMaster.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated requestMains for given GroupMaster id.
     *
     * @param groupId value of groupId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated RequestMain instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<RequestMain> findAssociatedRequestMains(Integer groupId, Pageable pageable);

}