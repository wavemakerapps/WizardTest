/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.rndpp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wizardtest.rndpp.RequestMain;

/**
 * Service object for domain model class {@link RequestMain}.
 */
public interface RequestMainService {

    /**
     * Creates a new RequestMain. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on RequestMain if any.
     *
     * @param requestMain Details of the RequestMain to be created; value cannot be null.
     * @return The newly created RequestMain.
     */
    RequestMain create(@Valid RequestMain requestMain);


	/**
     * Returns RequestMain by given id if exists.
     *
     * @param requestmainId The id of the RequestMain to get; value cannot be null.
     * @return RequestMain associated with the given requestmainId.
	 * @throws EntityNotFoundException If no RequestMain is found.
     */
    RequestMain getById(Integer requestmainId);

    /**
     * Find and return the RequestMain by given id if exists, returns null otherwise.
     *
     * @param requestmainId The id of the RequestMain to get; value cannot be null.
     * @return RequestMain associated with the given requestmainId.
     */
    RequestMain findById(Integer requestmainId);

	/**
     * Find and return the list of RequestMains by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param requestmainIds The id's of the RequestMain to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return RequestMains associated with the given requestmainIds.
     */
    List<RequestMain> findByMultipleIds(List<Integer> requestmainIds, boolean orderedReturn);


    /**
     * Updates the details of an existing RequestMain. It replaces all fields of the existing RequestMain with the given requestMain.
     *
     * This method overrides the input field values using Server side or database managed properties defined on RequestMain if any.
     *
     * @param requestMain The details of the RequestMain to be updated; value cannot be null.
     * @return The updated RequestMain.
     * @throws EntityNotFoundException if no RequestMain is found with given input.
     */
    RequestMain update(@Valid RequestMain requestMain);


    /**
     * Partially updates the details of an existing RequestMain. It updates only the
     * fields of the existing RequestMain which are passed in the requestMainPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on RequestMain if any.
     *
     * @param requestmainId The id of the RequestMain to be deleted; value cannot be null.
     * @param requestMainPatch The partial data of RequestMain which is supposed to be updated; value cannot be null.
     * @return The updated RequestMain.
     * @throws EntityNotFoundException if no RequestMain is found with given input.
     */
    RequestMain partialUpdate(Integer requestmainId, Map<String, Object> requestMainPatch);

    /**
     * Deletes an existing RequestMain with the given id.
     *
     * @param requestmainId The id of the RequestMain to be deleted; value cannot be null.
     * @return The deleted RequestMain.
     * @throws EntityNotFoundException if no RequestMain found with the given id.
     */
    RequestMain delete(Integer requestmainId);

    /**
     * Deletes an existing RequestMain with the given object.
     *
     * @param requestMain The instance of the RequestMain to be deleted; value cannot be null.
     */
    void delete(RequestMain requestMain);

    /**
     * Find all RequestMains matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching RequestMains.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<RequestMain> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all RequestMains matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching RequestMains.
     *
     * @see Pageable
     * @see Page
     */
    Page<RequestMain> findAll(String query, Pageable pageable);

    /**
     * Exports all RequestMains matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all RequestMains matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the RequestMains in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the RequestMain.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}