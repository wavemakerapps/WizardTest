/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.rndpp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wizardtest.rndpp.RequestMain;


/**
 * ServiceImpl object for domain model class RequestMain.
 *
 * @see RequestMain
 */
@Service("RNDPP.RequestMainService")
@Validated
public class RequestMainServiceImpl implements RequestMainService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RequestMainServiceImpl.class);


    @Autowired
    @Qualifier("RNDPP.RequestMainDao")
    private WMGenericDao<RequestMain, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<RequestMain, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public RequestMain create(RequestMain requestMain) {
        LOGGER.debug("Creating a new RequestMain with information: {}", requestMain);

        RequestMain requestMainCreated = this.wmGenericDao.create(requestMain);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(requestMainCreated);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public RequestMain getById(Integer requestmainId) {
        LOGGER.debug("Finding RequestMain by id: {}", requestmainId);
        return this.wmGenericDao.findById(requestmainId);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public RequestMain findById(Integer requestmainId) {
        LOGGER.debug("Finding RequestMain by id: {}", requestmainId);
        try {
            return this.wmGenericDao.findById(requestmainId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No RequestMain found with id: {}", requestmainId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public List<RequestMain> findByMultipleIds(List<Integer> requestmainIds, boolean orderedReturn) {
        LOGGER.debug("Finding RequestMains by ids: {}", requestmainIds);

        return this.wmGenericDao.findByMultipleIds(requestmainIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "RNDPPTransactionManager")
    @Override
    public RequestMain update(RequestMain requestMain) {
        LOGGER.debug("Updating RequestMain with information: {}", requestMain);

        this.wmGenericDao.update(requestMain);
        this.wmGenericDao.refresh(requestMain);

        return requestMain;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public RequestMain partialUpdate(Integer requestmainId, Map<String, Object>requestMainPatch) {
        LOGGER.debug("Partially Updating the RequestMain with id: {}", requestmainId);

        RequestMain requestMain = getById(requestmainId);

        try {
            ObjectReader requestMainReader = this.objectMapper.reader().forType(RequestMain.class).withValueToUpdate(requestMain);
            requestMain = requestMainReader.readValue(this.objectMapper.writeValueAsString(requestMainPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", requestMainPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        requestMain = update(requestMain);

        return requestMain;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public RequestMain delete(Integer requestmainId) {
        LOGGER.debug("Deleting RequestMain with id: {}", requestmainId);
        RequestMain deleted = this.wmGenericDao.findById(requestmainId);
        if (deleted == null) {
            LOGGER.debug("No RequestMain found with id: {}", requestmainId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), RequestMain.class.getSimpleName(), requestmainId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public void delete(RequestMain requestMain) {
        LOGGER.debug("Deleting RequestMain with {}", requestMain);
        this.wmGenericDao.delete(requestMain);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<RequestMain> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all RequestMains");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<RequestMain> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all RequestMains");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service RNDPP for table RequestMain to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service RNDPP for table RequestMain to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}