/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.rndpp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wizardtest.rndpp.GroupMaster;
import com.wizardtest.rndpp.RequestMain;


/**
 * ServiceImpl object for domain model class GroupMaster.
 *
 * @see GroupMaster
 */
@Service("RNDPP.GroupMasterService")
@Validated
public class GroupMasterServiceImpl implements GroupMasterService {

    private static final Logger LOGGER = LoggerFactory.getLogger(GroupMasterServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("RNDPP.RequestMainService")
    private RequestMainService requestMainService;

    @Autowired
    @Qualifier("RNDPP.GroupMasterDao")
    private WMGenericDao<GroupMaster, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<GroupMaster, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public GroupMaster create(GroupMaster groupMaster) {
        LOGGER.debug("Creating a new GroupMaster with information: {}", groupMaster);

        GroupMaster groupMasterCreated = this.wmGenericDao.create(groupMaster);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(groupMasterCreated);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public GroupMaster getById(Integer groupmasterId) {
        LOGGER.debug("Finding GroupMaster by id: {}", groupmasterId);
        return this.wmGenericDao.findById(groupmasterId);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public GroupMaster findById(Integer groupmasterId) {
        LOGGER.debug("Finding GroupMaster by id: {}", groupmasterId);
        try {
            return this.wmGenericDao.findById(groupmasterId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No GroupMaster found with id: {}", groupmasterId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public List<GroupMaster> findByMultipleIds(List<Integer> groupmasterIds, boolean orderedReturn) {
        LOGGER.debug("Finding GroupMasters by ids: {}", groupmasterIds);

        return this.wmGenericDao.findByMultipleIds(groupmasterIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "RNDPPTransactionManager")
    @Override
    public GroupMaster update(GroupMaster groupMaster) {
        LOGGER.debug("Updating GroupMaster with information: {}", groupMaster);

        this.wmGenericDao.update(groupMaster);
        this.wmGenericDao.refresh(groupMaster);

        return groupMaster;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public GroupMaster partialUpdate(Integer groupmasterId, Map<String, Object>groupMasterPatch) {
        LOGGER.debug("Partially Updating the GroupMaster with id: {}", groupmasterId);

        GroupMaster groupMaster = getById(groupmasterId);

        try {
            ObjectReader groupMasterReader = this.objectMapper.reader().forType(GroupMaster.class).withValueToUpdate(groupMaster);
            groupMaster = groupMasterReader.readValue(this.objectMapper.writeValueAsString(groupMasterPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", groupMasterPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        groupMaster = update(groupMaster);

        return groupMaster;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public GroupMaster delete(Integer groupmasterId) {
        LOGGER.debug("Deleting GroupMaster with id: {}", groupmasterId);
        GroupMaster deleted = this.wmGenericDao.findById(groupmasterId);
        if (deleted == null) {
            LOGGER.debug("No GroupMaster found with id: {}", groupmasterId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), GroupMaster.class.getSimpleName(), groupmasterId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public void delete(GroupMaster groupMaster) {
        LOGGER.debug("Deleting GroupMaster with {}", groupMaster);
        this.wmGenericDao.delete(groupMaster);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<GroupMaster> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all GroupMasters");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<GroupMaster> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all GroupMasters");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service RNDPP for table GroupMaster to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service RNDPP for table GroupMaster to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<RequestMain> findAssociatedRequestMains(Integer groupId, Pageable pageable) {
        LOGGER.debug("Fetching all associated requestMains");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("groupMaster.groupId = '" + groupId + "'");

        return requestMainService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service RequestMainService instance
     */
    protected void setRequestMainService(RequestMainService service) {
        this.requestMainService = service;
    }

}