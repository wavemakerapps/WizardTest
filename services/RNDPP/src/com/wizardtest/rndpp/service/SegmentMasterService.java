/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.rndpp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wizardtest.rndpp.GroupMaster;
import com.wizardtest.rndpp.RequestMain;
import com.wizardtest.rndpp.SectorMaster;
import com.wizardtest.rndpp.SegmentMaster;

/**
 * Service object for domain model class {@link SegmentMaster}.
 */
public interface SegmentMasterService {

    /**
     * Creates a new SegmentMaster. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SegmentMaster if any.
     *
     * @param segmentMaster Details of the SegmentMaster to be created; value cannot be null.
     * @return The newly created SegmentMaster.
     */
    SegmentMaster create(@Valid SegmentMaster segmentMaster);


	/**
     * Returns SegmentMaster by given id if exists.
     *
     * @param segmentmasterId The id of the SegmentMaster to get; value cannot be null.
     * @return SegmentMaster associated with the given segmentmasterId.
	 * @throws EntityNotFoundException If no SegmentMaster is found.
     */
    SegmentMaster getById(Integer segmentmasterId);

    /**
     * Find and return the SegmentMaster by given id if exists, returns null otherwise.
     *
     * @param segmentmasterId The id of the SegmentMaster to get; value cannot be null.
     * @return SegmentMaster associated with the given segmentmasterId.
     */
    SegmentMaster findById(Integer segmentmasterId);

	/**
     * Find and return the list of SegmentMasters by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param segmentmasterIds The id's of the SegmentMaster to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return SegmentMasters associated with the given segmentmasterIds.
     */
    List<SegmentMaster> findByMultipleIds(List<Integer> segmentmasterIds, boolean orderedReturn);


    /**
     * Updates the details of an existing SegmentMaster. It replaces all fields of the existing SegmentMaster with the given segmentMaster.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SegmentMaster if any.
     *
     * @param segmentMaster The details of the SegmentMaster to be updated; value cannot be null.
     * @return The updated SegmentMaster.
     * @throws EntityNotFoundException if no SegmentMaster is found with given input.
     */
    SegmentMaster update(@Valid SegmentMaster segmentMaster);


    /**
     * Partially updates the details of an existing SegmentMaster. It updates only the
     * fields of the existing SegmentMaster which are passed in the segmentMasterPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SegmentMaster if any.
     *
     * @param segmentmasterId The id of the SegmentMaster to be deleted; value cannot be null.
     * @param segmentMasterPatch The partial data of SegmentMaster which is supposed to be updated; value cannot be null.
     * @return The updated SegmentMaster.
     * @throws EntityNotFoundException if no SegmentMaster is found with given input.
     */
    SegmentMaster partialUpdate(Integer segmentmasterId, Map<String, Object> segmentMasterPatch);

    /**
     * Deletes an existing SegmentMaster with the given id.
     *
     * @param segmentmasterId The id of the SegmentMaster to be deleted; value cannot be null.
     * @return The deleted SegmentMaster.
     * @throws EntityNotFoundException if no SegmentMaster found with the given id.
     */
    SegmentMaster delete(Integer segmentmasterId);

    /**
     * Deletes an existing SegmentMaster with the given object.
     *
     * @param segmentMaster The instance of the SegmentMaster to be deleted; value cannot be null.
     */
    void delete(SegmentMaster segmentMaster);

    /**
     * Find all SegmentMasters matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SegmentMasters.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<SegmentMaster> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all SegmentMasters matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SegmentMasters.
     *
     * @see Pageable
     * @see Page
     */
    Page<SegmentMaster> findAll(String query, Pageable pageable);

    /**
     * Exports all SegmentMasters matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all SegmentMasters matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the SegmentMasters in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the SegmentMaster.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated groupMasters for given SegmentMaster id.
     *
     * @param segId value of segId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated GroupMaster instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<GroupMaster> findAssociatedGroupMasters(Integer segId, Pageable pageable);

    /*
     * Returns the associated requestMains for given SegmentMaster id.
     *
     * @param segId value of segId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated RequestMain instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<RequestMain> findAssociatedRequestMains(Integer segId, Pageable pageable);

    /*
     * Returns the associated sectorMasters for given SegmentMaster id.
     *
     * @param segId value of segId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated SectorMaster instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<SectorMaster> findAssociatedSectorMasters(Integer segId, Pageable pageable);

}