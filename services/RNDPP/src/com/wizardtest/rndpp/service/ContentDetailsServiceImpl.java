/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.rndpp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wizardtest.rndpp.ContentDetails;


/**
 * ServiceImpl object for domain model class ContentDetails.
 *
 * @see ContentDetails
 */
@Service("RNDPP.ContentDetailsService")
@Validated
public class ContentDetailsServiceImpl implements ContentDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ContentDetailsServiceImpl.class);


    @Autowired
    @Qualifier("RNDPP.ContentDetailsDao")
    private WMGenericDao<ContentDetails, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<ContentDetails, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public ContentDetails create(ContentDetails contentDetails) {
        LOGGER.debug("Creating a new ContentDetails with information: {}", contentDetails);

        ContentDetails contentDetailsCreated = this.wmGenericDao.create(contentDetails);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(contentDetailsCreated);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public ContentDetails getById(Integer contentdetailsId) {
        LOGGER.debug("Finding ContentDetails by id: {}", contentdetailsId);
        return this.wmGenericDao.findById(contentdetailsId);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public ContentDetails findById(Integer contentdetailsId) {
        LOGGER.debug("Finding ContentDetails by id: {}", contentdetailsId);
        try {
            return this.wmGenericDao.findById(contentdetailsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ContentDetails found with id: {}", contentdetailsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public List<ContentDetails> findByMultipleIds(List<Integer> contentdetailsIds, boolean orderedReturn) {
        LOGGER.debug("Finding ContentDetails by ids: {}", contentdetailsIds);

        return this.wmGenericDao.findByMultipleIds(contentdetailsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "RNDPPTransactionManager")
    @Override
    public ContentDetails update(ContentDetails contentDetails) {
        LOGGER.debug("Updating ContentDetails with information: {}", contentDetails);

        this.wmGenericDao.update(contentDetails);
        this.wmGenericDao.refresh(contentDetails);

        return contentDetails;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public ContentDetails partialUpdate(Integer contentdetailsId, Map<String, Object>contentDetailsPatch) {
        LOGGER.debug("Partially Updating the ContentDetails with id: {}", contentdetailsId);

        ContentDetails contentDetails = getById(contentdetailsId);

        try {
            ObjectReader contentDetailsReader = this.objectMapper.reader().forType(ContentDetails.class).withValueToUpdate(contentDetails);
            contentDetails = contentDetailsReader.readValue(this.objectMapper.writeValueAsString(contentDetailsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", contentDetailsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        contentDetails = update(contentDetails);

        return contentDetails;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public ContentDetails delete(Integer contentdetailsId) {
        LOGGER.debug("Deleting ContentDetails with id: {}", contentdetailsId);
        ContentDetails deleted = this.wmGenericDao.findById(contentdetailsId);
        if (deleted == null) {
            LOGGER.debug("No ContentDetails found with id: {}", contentdetailsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), ContentDetails.class.getSimpleName(), contentdetailsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "RNDPPTransactionManager")
    @Override
    public void delete(ContentDetails contentDetails) {
        LOGGER.debug("Deleting ContentDetails with {}", contentDetails);
        this.wmGenericDao.delete(contentDetails);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<ContentDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ContentDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<ContentDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ContentDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service RNDPP for table ContentDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service RNDPP for table ContentDetails to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "RNDPPTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}