/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.rndpp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wizardtest.rndpp.ActivityDetails;
import com.wizardtest.rndpp.service.ActivityDetailsService;


/**
 * Controller object for domain model class ActivityDetails.
 * @see ActivityDetails
 */
@RestController("RNDPP.ActivityDetailsController")
@Api(value = "ActivityDetailsController", description = "Exposes APIs to work with ActivityDetails resource.")
@RequestMapping("/RNDPP/ActivityDetails")
public class ActivityDetailsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ActivityDetailsController.class);

    @Autowired
	@Qualifier("RNDPP.ActivityDetailsService")
	private ActivityDetailsService activityDetailsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new ActivityDetails instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ActivityDetails createActivityDetails(@RequestBody ActivityDetails activityDetailsInstance) {
		LOGGER.debug("Create ActivityDetails with information: {}" , activityDetailsInstance);

		activityDetailsInstance = activityDetailsService.create(activityDetailsInstance);
		LOGGER.debug("Created ActivityDetails with information: {}" , activityDetailsInstance);

	    return activityDetailsInstance;
	}

    @ApiOperation(value = "Returns the ActivityDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ActivityDetails getActivityDetails(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting ActivityDetails with id: {}" , id);

        ActivityDetails foundActivityDetails = activityDetailsService.getById(id);
        LOGGER.debug("ActivityDetails details with id: {}" , foundActivityDetails);

        return foundActivityDetails;
    }

    @ApiOperation(value = "Updates the ActivityDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ActivityDetails editActivityDetails(@PathVariable("id") Integer id, @RequestBody ActivityDetails activityDetailsInstance) {
        LOGGER.debug("Editing ActivityDetails with id: {}" , activityDetailsInstance.getActId());

        activityDetailsInstance.setActId(id);
        activityDetailsInstance = activityDetailsService.update(activityDetailsInstance);
        LOGGER.debug("ActivityDetails details with id: {}" , activityDetailsInstance);

        return activityDetailsInstance;
    }
    
    @ApiOperation(value = "Partially updates the ActivityDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ActivityDetails patchActivityDetails(@PathVariable("id") Integer id, @RequestBody @MapTo(ActivityDetails.class) Map<String, Object> activityDetailsInstancePatch) {
        LOGGER.debug("Partially updating ActivityDetails with id: {}" , id);

        ActivityDetails activityDetailsInstance = activityDetailsService.partialUpdate(id, activityDetailsInstancePatch);
        LOGGER.debug("ActivityDetails details after partial update: {}" , activityDetailsInstance);

        return activityDetailsInstance;
    }

    @ApiOperation(value = "Deletes the ActivityDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteActivityDetails(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting ActivityDetails with id: {}" , id);

        ActivityDetails deletedActivityDetails = activityDetailsService.delete(id);

        return deletedActivityDetails != null;
    }

    /**
     * @deprecated Use {@link #findActivityDetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ActivityDetails instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<ActivityDetails> searchActivityDetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ActivityDetails list by query filter:{}", (Object) queryFilters);
        return activityDetailsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ActivityDetails instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ActivityDetails> findActivityDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ActivityDetails list by filter:", query);
        return activityDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ActivityDetails instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<ActivityDetails> filterActivityDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ActivityDetails list by filter", query);
        return activityDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportActivityDetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return activityDetailsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportActivityDetailsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = ActivityDetails.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> activityDetailsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of ActivityDetails instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countActivityDetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ActivityDetails");
		return activityDetailsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getActivityDetailsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return activityDetailsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ActivityDetailsService instance
	 */
	protected void setActivityDetailsService(ActivityDetailsService service) {
		this.activityDetailsService = service;
	}

}