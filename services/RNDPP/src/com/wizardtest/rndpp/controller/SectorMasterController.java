/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.rndpp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wizardtest.rndpp.GroupMaster;
import com.wizardtest.rndpp.RequestMain;
import com.wizardtest.rndpp.SectorMaster;
import com.wizardtest.rndpp.service.SectorMasterService;


/**
 * Controller object for domain model class SectorMaster.
 * @see SectorMaster
 */
@RestController("RNDPP.SectorMasterController")
@Api(value = "SectorMasterController", description = "Exposes APIs to work with SectorMaster resource.")
@RequestMapping("/RNDPP/SectorMaster")
public class SectorMasterController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SectorMasterController.class);

    @Autowired
	@Qualifier("RNDPP.SectorMasterService")
	private SectorMasterService sectorMasterService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new SectorMaster instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SectorMaster createSectorMaster(@RequestBody SectorMaster sectorMaster) {
		LOGGER.debug("Create SectorMaster with information: {}" , sectorMaster);

		sectorMaster = sectorMasterService.create(sectorMaster);
		LOGGER.debug("Created SectorMaster with information: {}" , sectorMaster);

	    return sectorMaster;
	}

    @ApiOperation(value = "Returns the SectorMaster instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SectorMaster getSectorMaster(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting SectorMaster with id: {}" , id);

        SectorMaster foundSectorMaster = sectorMasterService.getById(id);
        LOGGER.debug("SectorMaster details with id: {}" , foundSectorMaster);

        return foundSectorMaster;
    }

    @ApiOperation(value = "Updates the SectorMaster instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SectorMaster editSectorMaster(@PathVariable("id") Integer id, @RequestBody SectorMaster sectorMaster) {
        LOGGER.debug("Editing SectorMaster with id: {}" , sectorMaster.getSectorId());

        sectorMaster.setSectorId(id);
        sectorMaster = sectorMasterService.update(sectorMaster);
        LOGGER.debug("SectorMaster details with id: {}" , sectorMaster);

        return sectorMaster;
    }
    
    @ApiOperation(value = "Partially updates the SectorMaster instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SectorMaster patchSectorMaster(@PathVariable("id") Integer id, @RequestBody @MapTo(SectorMaster.class) Map<String, Object> sectorMasterPatch) {
        LOGGER.debug("Partially updating SectorMaster with id: {}" , id);

        SectorMaster sectorMaster = sectorMasterService.partialUpdate(id, sectorMasterPatch);
        LOGGER.debug("SectorMaster details after partial update: {}" , sectorMaster);

        return sectorMaster;
    }

    @ApiOperation(value = "Deletes the SectorMaster instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSectorMaster(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting SectorMaster with id: {}" , id);

        SectorMaster deletedSectorMaster = sectorMasterService.delete(id);

        return deletedSectorMaster != null;
    }

    /**
     * @deprecated Use {@link #findSectorMasters(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SectorMaster instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<SectorMaster> searchSectorMastersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SectorMasters list by query filter:{}", (Object) queryFilters);
        return sectorMasterService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SectorMaster instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SectorMaster> findSectorMasters(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SectorMasters list by filter:", query);
        return sectorMasterService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SectorMaster instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<SectorMaster> filterSectorMasters(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SectorMasters list by filter", query);
        return sectorMasterService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportSectorMasters(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return sectorMasterService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSectorMastersAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = SectorMaster.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> sectorMasterService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of SectorMaster instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countSectorMasters( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SectorMasters");
		return sectorMasterService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getSectorMasterAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return sectorMasterService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/requestMains", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the requestMains instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RequestMain> findAssociatedRequestMains(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated requestMains");
        return sectorMasterService.findAssociatedRequestMains(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/groupMasters", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the groupMasters instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GroupMaster> findAssociatedGroupMasters(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated groupMasters");
        return sectorMasterService.findAssociatedGroupMasters(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SectorMasterService instance
	 */
	protected void setSectorMasterService(SectorMasterService service) {
		this.sectorMasterService = service;
	}

}