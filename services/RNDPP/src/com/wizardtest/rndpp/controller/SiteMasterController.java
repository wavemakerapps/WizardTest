/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.rndpp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wizardtest.rndpp.RequestMain;
import com.wizardtest.rndpp.SiteMaster;
import com.wizardtest.rndpp.service.SiteMasterService;


/**
 * Controller object for domain model class SiteMaster.
 * @see SiteMaster
 */
@RestController("RNDPP.SiteMasterController")
@Api(value = "SiteMasterController", description = "Exposes APIs to work with SiteMaster resource.")
@RequestMapping("/RNDPP/SiteMaster")
public class SiteMasterController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SiteMasterController.class);

    @Autowired
	@Qualifier("RNDPP.SiteMasterService")
	private SiteMasterService siteMasterService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new SiteMaster instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SiteMaster createSiteMaster(@RequestBody SiteMaster siteMaster) {
		LOGGER.debug("Create SiteMaster with information: {}" , siteMaster);

		siteMaster = siteMasterService.create(siteMaster);
		LOGGER.debug("Created SiteMaster with information: {}" , siteMaster);

	    return siteMaster;
	}

    @ApiOperation(value = "Returns the SiteMaster instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SiteMaster getSiteMaster(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting SiteMaster with id: {}" , id);

        SiteMaster foundSiteMaster = siteMasterService.getById(id);
        LOGGER.debug("SiteMaster details with id: {}" , foundSiteMaster);

        return foundSiteMaster;
    }

    @ApiOperation(value = "Updates the SiteMaster instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SiteMaster editSiteMaster(@PathVariable("id") Integer id, @RequestBody SiteMaster siteMaster) {
        LOGGER.debug("Editing SiteMaster with id: {}" , siteMaster.getSiteId());

        siteMaster.setSiteId(id);
        siteMaster = siteMasterService.update(siteMaster);
        LOGGER.debug("SiteMaster details with id: {}" , siteMaster);

        return siteMaster;
    }
    
    @ApiOperation(value = "Partially updates the SiteMaster instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SiteMaster patchSiteMaster(@PathVariable("id") Integer id, @RequestBody @MapTo(SiteMaster.class) Map<String, Object> siteMasterPatch) {
        LOGGER.debug("Partially updating SiteMaster with id: {}" , id);

        SiteMaster siteMaster = siteMasterService.partialUpdate(id, siteMasterPatch);
        LOGGER.debug("SiteMaster details after partial update: {}" , siteMaster);

        return siteMaster;
    }

    @ApiOperation(value = "Deletes the SiteMaster instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSiteMaster(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting SiteMaster with id: {}" , id);

        SiteMaster deletedSiteMaster = siteMasterService.delete(id);

        return deletedSiteMaster != null;
    }

    /**
     * @deprecated Use {@link #findSiteMasters(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SiteMaster instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<SiteMaster> searchSiteMastersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SiteMasters list by query filter:{}", (Object) queryFilters);
        return siteMasterService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SiteMaster instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SiteMaster> findSiteMasters(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SiteMasters list by filter:", query);
        return siteMasterService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SiteMaster instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<SiteMaster> filterSiteMasters(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SiteMasters list by filter", query);
        return siteMasterService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportSiteMasters(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return siteMasterService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSiteMastersAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = SiteMaster.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> siteMasterService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of SiteMaster instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countSiteMasters( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SiteMasters");
		return siteMasterService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getSiteMasterAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return siteMasterService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/requestMains", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the requestMains instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RequestMain> findAssociatedRequestMains(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated requestMains");
        return siteMasterService.findAssociatedRequestMains(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SiteMasterService instance
	 */
	protected void setSiteMasterService(SiteMasterService service) {
		this.siteMasterService = service;
	}

}