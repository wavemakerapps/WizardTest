/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.rndpp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wizardtest.rndpp.NonEmp;
import com.wizardtest.rndpp.service.NonEmpService;


/**
 * Controller object for domain model class NonEmp.
 * @see NonEmp
 */
@RestController("RNDPP.NonEmpController")
@Api(value = "NonEmpController", description = "Exposes APIs to work with NonEmp resource.")
@RequestMapping("/RNDPP/NonEmp")
public class NonEmpController {

    private static final Logger LOGGER = LoggerFactory.getLogger(NonEmpController.class);

    @Autowired
	@Qualifier("RNDPP.NonEmpService")
	private NonEmpService nonEmpService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new NonEmp instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NonEmp createNonEmp(@RequestBody NonEmp nonEmp) {
		LOGGER.debug("Create NonEmp with information: {}" , nonEmp);

		nonEmp = nonEmpService.create(nonEmp);
		LOGGER.debug("Created NonEmp with information: {}" , nonEmp);

	    return nonEmp;
	}

    @ApiOperation(value = "Returns the NonEmp instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NonEmp getNonEmp(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting NonEmp with id: {}" , id);

        NonEmp foundNonEmp = nonEmpService.getById(id);
        LOGGER.debug("NonEmp details with id: {}" , foundNonEmp);

        return foundNonEmp;
    }

    @ApiOperation(value = "Updates the NonEmp instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NonEmp editNonEmp(@PathVariable("id") Integer id, @RequestBody NonEmp nonEmp) {
        LOGGER.debug("Editing NonEmp with id: {}" , nonEmp.getNonEmpId());

        nonEmp.setNonEmpId(id);
        nonEmp = nonEmpService.update(nonEmp);
        LOGGER.debug("NonEmp details with id: {}" , nonEmp);

        return nonEmp;
    }
    
    @ApiOperation(value = "Partially updates the NonEmp instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NonEmp patchNonEmp(@PathVariable("id") Integer id, @RequestBody @MapTo(NonEmp.class) Map<String, Object> nonEmpPatch) {
        LOGGER.debug("Partially updating NonEmp with id: {}" , id);

        NonEmp nonEmp = nonEmpService.partialUpdate(id, nonEmpPatch);
        LOGGER.debug("NonEmp details after partial update: {}" , nonEmp);

        return nonEmp;
    }

    @ApiOperation(value = "Deletes the NonEmp instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteNonEmp(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting NonEmp with id: {}" , id);

        NonEmp deletedNonEmp = nonEmpService.delete(id);

        return deletedNonEmp != null;
    }

    /**
     * @deprecated Use {@link #findNonEmps(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of NonEmp instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<NonEmp> searchNonEmpsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering NonEmps list by query filter:{}", (Object) queryFilters);
        return nonEmpService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of NonEmp instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<NonEmp> findNonEmps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering NonEmps list by filter:", query);
        return nonEmpService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of NonEmp instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<NonEmp> filterNonEmps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering NonEmps list by filter", query);
        return nonEmpService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportNonEmps(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return nonEmpService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportNonEmpsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = NonEmp.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> nonEmpService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of NonEmp instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countNonEmps( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting NonEmps");
		return nonEmpService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getNonEmpAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return nonEmpService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service NonEmpService instance
	 */
	protected void setNonEmpService(NonEmpService service) {
		this.nonEmpService = service;
	}

}