/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.rndpp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wizardtest.rndpp.ContentDetails;
import com.wizardtest.rndpp.service.ContentDetailsService;


/**
 * Controller object for domain model class ContentDetails.
 * @see ContentDetails
 */
@RestController("RNDPP.ContentDetailsController")
@Api(value = "ContentDetailsController", description = "Exposes APIs to work with ContentDetails resource.")
@RequestMapping("/RNDPP/ContentDetails")
public class ContentDetailsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ContentDetailsController.class);

    @Autowired
	@Qualifier("RNDPP.ContentDetailsService")
	private ContentDetailsService contentDetailsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new ContentDetails instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ContentDetails createContentDetails(@RequestPart("wm_data_json") ContentDetails contentDetails, @RequestPart(value = "attachNda", required = false) MultipartFile _attachNda, @RequestPart(value = "attachDocs", required = false) MultipartFile _attachDocs) {
		LOGGER.debug("Create ContentDetails with information: {}" , contentDetails);

    contentDetails.setAttachNda(WMMultipartUtils.toByteArray(_attachNda));
    contentDetails.setAttachDocs(WMMultipartUtils.toByteArray(_attachDocs));
		contentDetails = contentDetailsService.create(contentDetails);
		LOGGER.debug("Created ContentDetails with information: {}" , contentDetails);

	    return contentDetails;
	}

    @ApiOperation(value = "Returns the ContentDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ContentDetails getContentDetails(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting ContentDetails with id: {}" , id);

        ContentDetails foundContentDetails = contentDetailsService.getById(id);
        LOGGER.debug("ContentDetails details with id: {}" , foundContentDetails);

        return foundContentDetails;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in ContentDetails instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getContentDetailsBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in ContentDetails instance" , fieldName);

        if(!WMRuntimeUtils.isLob(ContentDetails.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        ContentDetails contentDetails = contentDetailsService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(contentDetails, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the ContentDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ContentDetails editContentDetails(@PathVariable("id") Integer id, @RequestBody ContentDetails contentDetails) {
        LOGGER.debug("Editing ContentDetails with id: {}" , contentDetails.getContentId());

        contentDetails.setContentId(id);
        contentDetails = contentDetailsService.update(contentDetails);
        LOGGER.debug("ContentDetails details with id: {}" , contentDetails);

        return contentDetails;
    }
    
    @ApiOperation(value = "Partially updates the ContentDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ContentDetails patchContentDetails(@PathVariable("id") Integer id, @RequestBody @MapTo(ContentDetails.class) Map<String, Object> contentDetailsPatch) {
        LOGGER.debug("Partially updating ContentDetails with id: {}" , id);

        ContentDetails contentDetails = contentDetailsService.partialUpdate(id, contentDetailsPatch);
        LOGGER.debug("ContentDetails details after partial update: {}" , contentDetails);

        return contentDetails;
    }

    @ApiOperation(value = "Updates the ContentDetails instance associated with the given id.This API should be used when ContentDetails instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ContentDetails editContentDetails(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) {
        ContentDetails newContentDetails = WMMultipartUtils.toObject(multipartHttpServletRequest, ContentDetails.class, "RNDPP");
        newContentDetails.setContentId(id);

        ContentDetails oldContentDetails = contentDetailsService.getById(id);
        WMMultipartUtils.updateLobsContent(oldContentDetails, newContentDetails);
        LOGGER.debug("Updating ContentDetails with information: {}" , newContentDetails);

        return contentDetailsService.update(newContentDetails);
    }

    @ApiOperation(value = "Deletes the ContentDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteContentDetails(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting ContentDetails with id: {}" , id);

        ContentDetails deletedContentDetails = contentDetailsService.delete(id);

        return deletedContentDetails != null;
    }

    /**
     * @deprecated Use {@link #findContentDetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ContentDetails instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<ContentDetails> searchContentDetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ContentDetails list by query filter:{}", (Object) queryFilters);
        return contentDetailsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ContentDetails instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ContentDetails> findContentDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ContentDetails list by filter:", query);
        return contentDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ContentDetails instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<ContentDetails> filterContentDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ContentDetails list by filter", query);
        return contentDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportContentDetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return contentDetailsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportContentDetailsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = ContentDetails.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> contentDetailsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of ContentDetails instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countContentDetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ContentDetails");
		return contentDetailsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getContentDetailsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return contentDetailsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ContentDetailsService instance
	 */
	protected void setContentDetailsService(ContentDetailsService service) {
		this.contentDetailsService = service;
	}

}