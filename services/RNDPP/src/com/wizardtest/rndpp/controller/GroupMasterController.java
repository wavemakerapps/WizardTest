/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.rndpp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wizardtest.rndpp.GroupMaster;
import com.wizardtest.rndpp.RequestMain;
import com.wizardtest.rndpp.service.GroupMasterService;


/**
 * Controller object for domain model class GroupMaster.
 * @see GroupMaster
 */
@RestController("RNDPP.GroupMasterController")
@Api(value = "GroupMasterController", description = "Exposes APIs to work with GroupMaster resource.")
@RequestMapping("/RNDPP/GroupMaster")
public class GroupMasterController {

    private static final Logger LOGGER = LoggerFactory.getLogger(GroupMasterController.class);

    @Autowired
	@Qualifier("RNDPP.GroupMasterService")
	private GroupMasterService groupMasterService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new GroupMaster instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GroupMaster createGroupMaster(@RequestBody GroupMaster groupMaster) {
		LOGGER.debug("Create GroupMaster with information: {}" , groupMaster);

		groupMaster = groupMasterService.create(groupMaster);
		LOGGER.debug("Created GroupMaster with information: {}" , groupMaster);

	    return groupMaster;
	}

    @ApiOperation(value = "Returns the GroupMaster instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GroupMaster getGroupMaster(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting GroupMaster with id: {}" , id);

        GroupMaster foundGroupMaster = groupMasterService.getById(id);
        LOGGER.debug("GroupMaster details with id: {}" , foundGroupMaster);

        return foundGroupMaster;
    }

    @ApiOperation(value = "Updates the GroupMaster instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GroupMaster editGroupMaster(@PathVariable("id") Integer id, @RequestBody GroupMaster groupMaster) {
        LOGGER.debug("Editing GroupMaster with id: {}" , groupMaster.getGroupId());

        groupMaster.setGroupId(id);
        groupMaster = groupMasterService.update(groupMaster);
        LOGGER.debug("GroupMaster details with id: {}" , groupMaster);

        return groupMaster;
    }
    
    @ApiOperation(value = "Partially updates the GroupMaster instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GroupMaster patchGroupMaster(@PathVariable("id") Integer id, @RequestBody @MapTo(GroupMaster.class) Map<String, Object> groupMasterPatch) {
        LOGGER.debug("Partially updating GroupMaster with id: {}" , id);

        GroupMaster groupMaster = groupMasterService.partialUpdate(id, groupMasterPatch);
        LOGGER.debug("GroupMaster details after partial update: {}" , groupMaster);

        return groupMaster;
    }

    @ApiOperation(value = "Deletes the GroupMaster instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteGroupMaster(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting GroupMaster with id: {}" , id);

        GroupMaster deletedGroupMaster = groupMasterService.delete(id);

        return deletedGroupMaster != null;
    }

    /**
     * @deprecated Use {@link #findGroupMasters(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of GroupMaster instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<GroupMaster> searchGroupMastersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering GroupMasters list by query filter:{}", (Object) queryFilters);
        return groupMasterService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of GroupMaster instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GroupMaster> findGroupMasters(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering GroupMasters list by filter:", query);
        return groupMasterService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of GroupMaster instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<GroupMaster> filterGroupMasters(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering GroupMasters list by filter", query);
        return groupMasterService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportGroupMasters(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return groupMasterService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGroupMastersAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = GroupMaster.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> groupMasterService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of GroupMaster instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countGroupMasters( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting GroupMasters");
		return groupMasterService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getGroupMasterAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return groupMasterService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/requestMains", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the requestMains instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RequestMain> findAssociatedRequestMains(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated requestMains");
        return groupMasterService.findAssociatedRequestMains(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service GroupMasterService instance
	 */
	protected void setGroupMasterService(GroupMasterService service) {
		this.groupMasterService = service;
	}

}