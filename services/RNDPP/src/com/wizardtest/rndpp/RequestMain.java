/*Copyright (c) 2015-2016 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/
package com.wizardtest.rndpp;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * RequestMain generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`RequestMain`")
public class RequestMain implements Serializable {

    private Integer requestId;
    private Integer employeeId;
    private LocalDateTime requestDate;
    private Integer segId;
    private Integer sectId;
    private Integer groupId;
    private Integer siteId;
    private Employee employee;
    private GroupMaster groupMaster;
    private SectorMaster sectorMaster;
    private SegmentMaster segmentMaster;
    private SiteMaster siteMaster;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`RequestID`", nullable = false, scale = 0, precision = 10)
    public Integer getRequestId() {
        return this.requestId;
    }

    public void setRequestId(Integer requestId) {
        this.requestId = requestId;
    }

    @Column(name = "`EmployeeID`", nullable = true, scale = 0, precision = 10)
    public Integer getEmployeeId() {
        return this.employeeId;
    }

    public void setEmployeeId(Integer employeeId) {
        this.employeeId = employeeId;
    }

    @Column(name = "`Request Date`", nullable = true)
    public LocalDateTime getRequestDate() {
        return this.requestDate;
    }

    public void setRequestDate(LocalDateTime requestDate) {
        this.requestDate = requestDate;
    }

    @Column(name = "`SegID`", nullable = true, scale = 0, precision = 10)
    public Integer getSegId() {
        return this.segId;
    }

    public void setSegId(Integer segId) {
        this.segId = segId;
    }

    @Column(name = "`SectID`", nullable = true, scale = 0, precision = 10)
    public Integer getSectId() {
        return this.sectId;
    }

    public void setSectId(Integer sectId) {
        this.sectId = sectId;
    }

    @Column(name = "`GroupID`", nullable = true, scale = 0, precision = 10)
    public Integer getGroupId() {
        return this.groupId;
    }

    public void setGroupId(Integer groupId) {
        this.groupId = groupId;
    }

    @Column(name = "`SiteID`", nullable = true, scale = 0, precision = 10)
    public Integer getSiteId() {
        return this.siteId;
    }

    public void setSiteId(Integer siteId) {
        this.siteId = siteId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`EmployeeID`", referencedColumnName = "`EmpID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_Employee_TO_RequestMa1rcoQ`"))
    @Fetch(FetchMode.JOIN)
    public Employee getEmployee() {
        return this.employee;
    }

    public void setEmployee(Employee employee) {
        if(employee != null) {
            this.employeeId = employee.getEmpId();
        }

        this.employee = employee;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`GroupID`", referencedColumnName = "`GroupID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_RequestMain_TO_GroupMmVtSS`"))
    @Fetch(FetchMode.JOIN)
    public GroupMaster getGroupMaster() {
        return this.groupMaster;
    }

    public void setGroupMaster(GroupMaster groupMaster) {
        if(groupMaster != null) {
            this.groupId = groupMaster.getGroupId();
        }

        this.groupMaster = groupMaster;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`SectID`", referencedColumnName = "`SectorID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_RequestMain_TO_Sectori4EVW`"))
    @Fetch(FetchMode.JOIN)
    public SectorMaster getSectorMaster() {
        return this.sectorMaster;
    }

    public void setSectorMaster(SectorMaster sectorMaster) {
        if(sectorMaster != null) {
            this.sectId = sectorMaster.getSectorId();
        }

        this.sectorMaster = sectorMaster;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`SegID`", referencedColumnName = "`SegID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_RequestMain_TO_SegmenfTCG9`"))
    @Fetch(FetchMode.JOIN)
    public SegmentMaster getSegmentMaster() {
        return this.segmentMaster;
    }

    public void setSegmentMaster(SegmentMaster segmentMaster) {
        if(segmentMaster != null) {
            this.segId = segmentMaster.getSegId();
        }

        this.segmentMaster = segmentMaster;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`SiteID`", referencedColumnName = "`SiteID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_RequestMain_TO_SiteMa828Lq`"))
    @Fetch(FetchMode.JOIN)
    public SiteMaster getSiteMaster() {
        return this.siteMaster;
    }

    public void setSiteMaster(SiteMaster siteMaster) {
        if(siteMaster != null) {
            this.siteId = siteMaster.getSiteId();
        }

        this.siteMaster = siteMaster;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof RequestMain)) return false;
        final RequestMain requestMain = (RequestMain) o;
        return Objects.equals(getRequestId(), requestMain.getRequestId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getRequestId());
    }
}